lavavel 分页两种方法：
第一种：只有分页
$sql -> offset($params['start'])->limit($params['length']);
通过偏移（offset）和限制（limit）来实现分页 ， 
offset   表示   当前页数
limit     表示    每页条数
但是这种方法我们需要再加一个接口来获取总条数

第二种：返回分页后的数据和总条数

第二种可以在分页后获取到数据的同时，也返回总条数
语法：paginate(int $perPage, array $columns, string $pageName, int|null $page) 
int $perPage：每页几条
array $columns：返回的字段数组。
string $pageName:分页字段名（无特殊要求我都是命名为page）
int|null $page：第几页

paginate(3,['rb_order_id'],'page',2);

集合中 添加一个字段
put(key, value);

laravel在中间件内生成参数并且传递到控制器2种姿势:

姿势1:

使用$request->attributes->add($arr)方法

Demo:
注册中间件这部分就不说了 主要说用法

class MidParams //中间件
{
    public function handle($request, Closure $next)
    {
        $mid_params = ['mid_params'=>'this is mid_params'];
        $request->attributes->add($mid_params);//添加参数

        return $next($request);//进行下一步(即传递给控制器)
    }
}

class MidController extends  Controller { //控制器
    public function testMidFunc(Request $request) {
        $input_params =  $request->input();//获取参数
        $mid_params = $request->get('mid_params');//中间件产生的参数
        return ['my_params'=>$input_params,
        'mid_params'=>$mid_params];
        //注意：$request->attributes->add这种方法 input()取不到值        只能用get('xxx')取到值
    }
}

姿势2：

使用$request->merge($arr)方法

Demo:
class MidParams //中间件
{
    public function handle($request, Closure $next)
    {
        $mid_params = ['mid_params'=>'this is mid_params'];
        $request->merge($mid_params);//合并参数
        return $next($request);
    }
}

class MidController extends  Controller { //控制器
    public function testMidFunc(Request $request) {
        $all_params =  $request->input();//获取参数
        return ['all_params'=>$all_params];
    }
}
注：merge后$request->input()能获取到所有的参数